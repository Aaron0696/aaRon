% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prettylavaan.R
\name{prettylavaan}
\alias{prettylavaan}
\title{Pretty Printing of Lavaan Results}
\usage{
prettylavaan(
  fitobj,
  output_format = "asis",
  robust = FALSE,
  modindice.nrow = 10,
  param.type = c("=~", "~~", "~"),
  ...
)
}
\arguments{
\item{fitobj}{A lavaan fit object.}

\item{output_format}{Output format, either "asis" for use with \code{results = "asis"} chunks. Or "datatable" for general html output.}

\item{robust}{Defaults to \code{FALSE}, set to \code{TRUE} to print out scaled and robust fit indicators.}

\item{modindice.nrow}{Defaults to 10. Number of rows to display for modification indices.}

\item{param.type}{Defaults to only show path coefficients (~), factor loadings (=~) and covariances (~~). Use (|) for thresholds.}

\item{...}{Additional arguments passed onto \code{kable()} or \code{datatable} depending on \code{output_format}.}
}
\value{

}
\description{
Results from \code{lavaan} get messed up when \code{summary()} is called within a for loop within an RMarkdown document with the chunk option \code{results = "asis"}.
This function is an alternative to \code{summary()} that can print out a pretty output within such a loop.
}
\examples{
library(lavaan)
# the famous Holzinger and Swineford (1939) example
HS.model <-  "visual  =~ x1 + x2 + x3
              textual =~ x4 + x5 + x6
              speed   =~ x7 + x8 + x9"
fit <- cfa(HS.model, data = HolzingerSwineford1939)
prettylavaan(fit, output_format = "datatable")

# using robust estimators
robustfit <- cfa(HS.model, data = HolzingerSwineford1939)
prettylavaan(robustfit, output_format = "datatable")

# request for robust fit indices
prettylavaan(robustfit, output_format = "datatable", robust = TRUE)
}
